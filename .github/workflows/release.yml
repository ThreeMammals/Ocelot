name: Release
on:
  push:
    branches: [ "release/24.0" ] # main
env:
  WORKFLOW_VAR: Release # ${{ vars.WORKFLOW_VAR }}
jobs:
  # build-linux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       dotnet-version: [ '8.0', '9.0' ]
  #   steps:
  #     - name: Setup .NET ${{ matrix.dotnet-version }}
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: ${{ matrix.dotnet-version }}.x
  #     - name: .NET Info
  #       run: dotnet --info
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Restore
  #       run: dotnet restore ./Ocelot.Release.sln -p:TargetFramework=net${{ matrix.dotnet-version }}
  #     - name: Build
  #       run: dotnet build --no-restore ./Ocelot.Release.sln --framework net${{ matrix.dotnet-version }}
  #     - name: Unit Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.UnitTests/Ocelot.UnitTests.csproj
  #     - name: Integration Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.IntegrationTests/Ocelot.IntegrationTests.csproj
  #     - name: Acceptance Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.AcceptanceTests/Ocelot.AcceptanceTests.csproj
  # build-windows:
  #   needs: build-linux
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       dotnet-version: [ '8.0', '9.0' ]
  #   steps:
  #     - name: Setup .NET ${{ matrix.dotnet-version }}
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: ${{ matrix.dotnet-version }}.x
  #     - name: .NET Info
  #       run: dotnet --info
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Restore
  #       run: dotnet restore ./Ocelot.Release.sln -p:TargetFramework=net${{ matrix.dotnet-version }}
  #     - name: Build
  #       run: dotnet build --no-restore ./Ocelot.Release.sln --framework net${{ matrix.dotnet-version }}
  #     - name: Unit Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.UnitTests/Ocelot.UnitTests.csproj
  #     - name: Integration Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.IntegrationTests/Ocelot.IntegrationTests.csproj
  #     - name: Acceptance Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.AcceptanceTests/Ocelot.AcceptanceTests.csproj
  # build-macos:
  #   needs: build-windows
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       dotnet-version: [ '8.0', '9.0' ]
  #   steps:
  #     - name: Setup .NET ${{ matrix.dotnet-version }}
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: ${{ matrix.dotnet-version }}.x
  #     - name: .NET Info
  #       run: dotnet --info
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Restore
  #       run: dotnet restore ./Ocelot.Release.sln -p:TargetFramework=net${{ matrix.dotnet-version }}
  #     - name: Build
  #       run: dotnet build --no-restore ./Ocelot.Release.sln --framework net${{ matrix.dotnet-version }}
  #     - name: Unit Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.UnitTests/Ocelot.UnitTests.csproj
  #     - name: Integration Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.IntegrationTests/Ocelot.IntegrationTests.csproj
  #     - name: Acceptance Tests
  #       run: dotnet test --no-restore --no-build --verbosity minimal --framework net${{ matrix.dotnet-version }} ./test/Ocelot.AcceptanceTests/Ocelot.AcceptanceTests.csproj

  # display-variables:
  #   # name: ${{ vars.JOB_NAME }}
  #   # You can use configuration variables with the `vars` context for dynamic jobs
  #   if: true # ${{ vars.USE_VARIABLES == 'true' }}
  #   runs-on: ubuntu-latest # ${{ vars.RUNNER }}
  #   environment: build.cake
  #   steps:
  #   - name: Use variables
  #     run: |
  #       echo "CAKE_RELEASE_MYVAR variable : $CAKE_RELEASE_MYVAR"
  #       echo "WORKFLOW_VAR : $WORKFLOW_VAR"
  #     env:
  #       ENV_CONTEXT_VAR: ${{ vars.ENV_CONTEXT_VAR }}
  #       CAKE_RELEASE_MYVAR: ${{ vars.CAKE_RELEASE_MYVAR }}
  #   - name: HELLO_WORLD
  #     # if: ${{ vars.HELLO_WORLD_ENABLED == 'true' }}
  #     uses: actions/hello-world-javascript-action@main
  #     with:
  #       who-to-greet: Raman # ${{ vars.GREET_NAME }}
  release-cake:
    # needs: build-macos
    runs-on: ubuntu-latest
    environment: build.cake
    env:
      # https://github.com/actions/setup-dotnet/blob/main/README.md#environment-variables
      DOTNET_INSTALL_DIR: "/usr/lib/dotnet" # override /usr/share/dotnet
      # NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
    - name: Env Variables
      env:
        ENV_CONTEXT_VAR:  ${{ vars.ENV_CONTEXT_VAR }}
        CAKE_RELEASE_MYVAR: ${{ vars.CAKE_RELEASE_MYVAR }}
      run: |
        echo "WORKFLOW_VAR : $WORKFLOW_VAR"
        echo "ENV_CONTEXT_VAR : $ENV_CONTEXT_VAR"
        echo "CAKE_RELEASE_MYVAR : $CAKE_RELEASE_MYVAR"
    - name: /usr/lib/dotnet
      run: |
        ls -ld /usr/lib/dotnet
        sudo chmod -R 775 /usr/lib/dotnet
        sudo chown -R $USER:$USER /usr/lib/dotnet
        ls -ld /usr/lib/dotnet
    - name: .NET Version 
      run: dotnet --version
    - name: .NET Info
      run: dotnet --info
    - name: Check .NET 8
      id: check-dotnet8
      run: |
        DOTNET8_VERSION=$(dotnet --version)
        if [[ "$DOTNET8_VERSION" =~ ^8\.0\.[0-9]+$ ]]; then
          echo "dotnet8_installed=true" >> $GITHUB_ENV
        else
          echo "dotnet8_installed=false" >> $GITHUB_ENV
        fi
    - name: Setup .NET 8
      if: env.dotnet8_installed == 'false'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v3
    #   with:
    #     dotnet-version: 8.0.x, 9.0.x
    - name: Check .NET 9
      id: check-dotnet9
      run: |
        DOTNET9_VERSION=$(dotnet --version)
        if [[ "$DOTNET9_VERSION" =~ ^9\.0\.[0-9]+$ ]]; then
          echo "dotnet9_installed=true" >> $GITHUB_ENV
        else
          echo "dotnet9_installed=false" >> $GITHUB_ENV
        fi
    - name: Setup .NET 9
      if: env.dotnet9_installed == 'false'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x
    - name: .NET Info
      run: dotnet --info
    - name: Branch Name
      run: echo "Branch name is ${{ github.ref_name }}"
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Cake Release
      uses: cake-build/cake-action@v3
      with:
        target: Release
      env:
        ENV_CONTEXT_VAR:  ${{ vars.ENV_CONTEXT_VAR }}
        CAKE_RELEASE_MYVAR: ${{ vars.CAKE_RELEASE_MYVAR }}
        TEMP_KEY: ${{ secrets.TEMP_KEY }}
        OCELOT_GITHUB_API_KEY: ${{ secrets.OCELOT_GITHUB_API_KEY }}
        OCELOT_NUGET_API_KEY_2025: ${{ secrets.OCELOT_NUGET_API_KEY_2025 }}
